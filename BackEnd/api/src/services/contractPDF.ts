import crypto from 'crypto';

export interface ContractData {
  student_name: string;
  guardian_name: string;
  school_name: string;
  sections: Array<{
    title: string;
    content: string;
    signed_at?: string;
    ip_address?: string;
  }>;
}

export function generateContractPDF(data: ContractData): Buffer {
  // In production, use a proper PDF library like puppeteer or jsPDF
  // This is a minimal implementation for demo
  
  const content = `
ELECTRONIC CONTRACT - ${data.school_name}

Student: ${data.student_name}
Guardian: ${data.guardian_name}
Generated: ${new Date().toISOString()}

ECTA COMPLIANCE NOTICE:
By signing this contract electronically, you agree that:
1. You have read and understood all sections
2. Your electronic signature has the same legal effect as a handwritten signature
3. You consent to conduct this transaction electronically
4. You have the necessary technology to access and retain this document

CONTRACT SECTIONS:
${data.sections.map((section, i) => `
${i + 1}. ${section.title}
${section.content}

${section.signed_at ? `✓ SIGNED: ${section.signed_at} from ${section.ip_address}` : '☐ PENDING SIGNATURE'}
`).join('\n')}

Document Hash: ${generateDocumentHash(data)}
Generated by DevForgeSolutions School Management System
  `;
  
  return Buffer.from(content, 'utf8');
}

export function generateDocumentHash(data: ContractData): string {
  // Create deterministic hash of contract content
  const hashData = JSON.stringify({
    student: data.student_name,
    guardian: data.guardian_name,
    school: data.school_name,
    sections: data.sections.map(s => ({ title: s.title, content: s.content }))
  });
  
  return crypto.createHash('sha256').update(hashData).digest('hex');
}

export function validateSignature(contractId: string, sectionId: string, guardianId: string, 
  ipAddress: string, userAgent: string): any {
  
  return {
    contract_id: contractId,
    section_id: sectionId,
    guardian_id: guardianId,
    signed_at: new Date().toISOString(),
    ip_address: ipAddress,
    user_agent: userAgent.slice(0, 500), // Limit length
    signature_hash: crypto.createHash('sha256')
      .update(`${contractId}-${sectionId}-${guardianId}-${Date.now()}`)
      .digest('hex')
  };
}